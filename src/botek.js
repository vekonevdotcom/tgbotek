const { startTime, muteTime, parseTime, formatUptime } = require("./times.js")
const { allowedUsers } = require("./allowedUsers.js")
let warns = {};
let muteHistory = {};
function infbot(bot) {
    bot.on('text', async (ctx) => {
    const message = ctx.message.text;
    if (!message.startsWith('.')) return;

    const args = message.split(' ');
    const cmd = args[0].toLowerCase();
    const timeArg = args[1];
    const reply = ctx.message.reply_to_message;
    const chatId = ctx.chat.id;

    if (cmd === '.me') {
        let target = ctx.from;
        if (args[1]) {
            const searchName = args[1].toLowerCase();
            const historyLimit = 50;
            let foundUser = null;
            let offsetId = 0;

            for (let i = 0; i < historyLimit; i++) {
                try {
                    const history = await ctx.telegram.getChatHistory(chatId, { limit: 1, offset_id: offsetId });
                    if (!history.length) break;
                    const msg = history[0];
                    offsetId = msg.message_id;
                    if (msg.from.username && msg.from.username.toLowerCase() === searchName) {
                        foundUser = msg.from;
                        break;
                    }
                } catch (err) { console.error(err); }
            }
            if (foundUser) {
                target = foundUser;
            } else {
                return ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${searchName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö ${historyLimit} —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.`);
            }
        }
        const warnsCount = warns[target.id] || 0;
        const isAdmin = allowedUsers.includes(target.id);
        return ctx.reply(
            `üìã –ü—Ä–æ—Ñ–∏–ª—å:\nüÜî ID: ${target.id}\nüë§ –ù–∏–∫: ${target.first_name} (${target.username || "–±–µ–∑ username"})\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${warnsCount}/3\nüîë –°—Ç–∞—Ç—É—Å: ${isAdmin ? "–ê–¥–º–∏–Ω üéñÔ∏è" : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üë§"}`
        );
    }

    if (cmd === '.dice') return ctx.sendDice();

    if (cmd === '.joke') {
        const datah = await fetch("https://official-joke-api.appspot.com/random_joke");
        const joke = await datah.json();
        return ctx.reply(`${ctx.from.username || ctx.from.first_name} —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:\n${joke.setup} - ${joke.punchline}`);
    }

    if (cmd === '.hi') {
        return ctx.replyWithSticker("CAACAgIAAxkBAAIBHmiTGj9ENs-0xDk2KPdkXgu4yewpAALgVQACV_wBSubd-bDyhHK4NgQ");
    }

    if (cmd === '.ping') {
        const start = Date.now();
        await ctx.reply('üèì –ü–∏–Ω–≥...');
        const ping = Date.now() - start;
        return ctx.reply(`üì° –ü–∏–Ω–≥: ${ping}ms`);
    }

    if (cmd === '.uptime') {
        return ctx.reply(`‚è≥ –ê–ø—Ç–∞–π–º –±–æ—Ç–∞: ${formatUptime(Date.now() - startTime)}`);
    }
    
    if (cmd === '.admins') {
        const adminList = allowedUsers.map(id => `üÜî ${id}`).join("\n");
        return ctx.reply(`üéñÔ∏è –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n${adminList}`);
    }
    
    if (cmd === '.server') {
        return ctx.reply(`üíª –°–µ—Ä–≤–µ—Ä –∂–∏–≤.\n‚è≥ –ê–ø—Ç–∞–π–º: ${formatUptime(Date.now() - startTime)}`);
    }

    const adminCommands = ['.warn', '.clearwarn', '.ban', '.unban', '.kick', '.mute', '.unmute', '.del', '.purge', '.lock', '.unlock'];
    if (adminCommands.includes(cmd) && !allowedUsers.includes(ctx.from.id)) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    if (cmd === '.cmds') {
    const userIsAdmin = allowedUsers.includes(ctx.from.id);

    const commonCmds = [
        ".me [username] ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–±–µ –∏–ª–∏ –¥—Ä—É–≥–æ–º",
        ".dice ‚Äî –∫–∏–Ω—É—Ç—å –∫—É–±–∏–∫ üé≤",
        ".joke ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞",
        ".hi ‚Äî —Å—Ç–∏–∫–µ—Ä-–ø—Ä–∏–≤–µ—Ç",
        ".ping ‚Äî –ø–∏–Ω–≥ –±–æ—Ç–∞",
        ".uptime ‚Äî –∞–ø—Ç–∞–π–º –±–æ—Ç–∞",
        ".admins ‚Äî —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤",
        ".server ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ"
    ];

    const adminCmds = [
        ".warn ‚Äî –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
        ".clearwarn ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è",
        ".ban [–≤—Ä–µ–º—è] ‚Äî –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        ".unban ‚Äî —Ä–∞–∑–±–∞–Ω",
        ".kick ‚Äî –∫–∏–∫–Ω—É—Ç—å",
        ".mute <–≤—Ä–µ–º—è> ‚Äî –∑–∞–º—É—Ç–∏—Ç—å",
        ".unmute ‚Äî —Ä–∞–∑–º—É—Ç–∏—Ç—å",
        ".del ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
        ".purge [—á–∏—Å–ª–æ] ‚Äî —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π",
        ".lock ‚Äî –∑–∞–∫—Ä—ã—Ç—å —á–∞—Ç",
        ".unlock ‚Äî –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç"
    ];

    if (userIsAdmin) {
        return ctx.reply(
            `üìú –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥:\n\n` +
            `üí¨ –û–±—ã—á–Ω—ã–µ:\n${commonCmds.join("\n")}\n\n` +
            `üõ° –ê–¥–º–∏–Ω—Å–∫–∏–µ:\n${adminCmds.join("\n")}`
        );
    } else {
        return ctx.reply(
            `üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
            commonCmds.join("\n")
        );
    }
    }

    if (cmd === '.lock') {
        await ctx.telegram.setChatPermissions(chatId, { can_send_messages: false });
        return ctx.reply('üîí –ß–∞—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.');
    }

    if (cmd === '.unlock') {
        await ctx.telegram.setChatPermissions(chatId, { can_send_messages: true });
        return ctx.reply('üîì –ß–∞—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.');
    }
    
// YAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYA
    if (adminCommands.includes(cmd) && !reply) {
        return ctx.reply('–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }
// YAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYAYA
    const userId = reply?.from?.id;
    const username = reply?.from?.username || reply?.from?.first_name;
    if (cmd === '.admin') {
        if (!args[1]) {
            let adminList = allowedUsers.map(id => `üÜî ${id}`).join("\n");
            return ctx.reply(
                `üõ° –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n` +
                (adminList || "–ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤")
            );
        }
        
        if (!allowedUsers.includes(ctx.from.id)) {
            return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
        }
        
        if (!reply) {
            return ctx.reply('‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        }
        
        const targetId = reply.from.id;
        const targetName = reply.from.username || reply.from.first_name;
        
        if (args[1].toLowerCase() === 'add') {
            if (allowedUsers.includes(targetId)) {
                return ctx.reply(`‚ÑπÔ∏è ${targetName} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.`);
            }
            allowedUsers.push(targetId);
            return ctx.reply(`‚úÖ ${targetName} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º.`);
        }

        if (args[1].toLowerCase() === 'del') {
            if (!allowedUsers.includes(targetId)) {
                return ctx.reply(`‚ÑπÔ∏è ${targetName} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.`);
            }
           allowedUsers = allowedUsers.filter(id => id !== targetId);
            return ctx.reply(`‚ùå ${targetName} –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω.`);
        }
        }


    try {
        if (cmd === '.warn') {
            if (!warns[userId]) warns[userId] = 0;
            warns[userId]++;
            await ctx.reply(`‚ö†Ô∏è ${username} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (${warns[userId]}/3)`);
            if (warns[userId] >= 3) {
                if (!muteHistory[userId]) muteHistory[userId] = 0;
                muteHistory[userId]++;
                const days = muteHistory[userId];
                await ctx.telegram.restrictChatMember(chatId, userId, {
                    until_date: muteTime(days),
                    permissions: { can_send_messages: false }
                });
                await ctx.reply(`‚õî ${username} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ ${days} –¥–Ω.`);
                warns[userId] = 0;
            }
        }

        if (cmd === '.clearwarn') {
            warns[userId] = 0;
            return ctx.reply(`‚úÖ –í—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è ${username} —É–¥–∞–ª–µ–Ω—ã.`);
        }

        if (cmd === '.ban') {
            await ctx.telegram.banChatMember(chatId, userId, { until_date: parseTime(timeArg) || undefined });
            return ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω ${timeArg ? `–Ω–∞ ${timeArg}` : '–Ω–∞–≤—Å–µ–≥–¥–∞'} ‚úÖ`);
        }

        if (cmd === '.unban') {
            await ctx.telegram.unbanChatMember(chatId, userId);
            return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω ‚úÖ');
        }

        if (cmd === '.kick') {
            await ctx.telegram.unbanChatMember(chatId, userId);
            return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–∫–Ω—É—Ç ‚úÖ');
        }

        if (cmd === '.mute') {
            const untilDate = parseTime(timeArg);
            if (!untilDate) return ctx.reply('–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –¥–ª—è –º—É—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä `.mute 10m`');
            await ctx.telegram.restrictChatMember(chatId, userId, {
                until_date: untilDate,
                permissions: { can_send_messages: false }
            });
            return ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω –Ω–∞ ${timeArg} ‚úÖ`);
        }

        if (cmd === '.unmute') {
            await ctx.telegram.restrictChatMember(chatId, userId, {
                permissions: { can_send_messages: true }
            });
            return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—É—á–µ–Ω ‚úÖ');
        }

        if (cmd === '.del') {
            await ctx.deleteMessage(reply.message_id);
            return ctx.reply('üóë –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.');
        }

        if (cmd === '.purge') {
            let count = parseInt(timeArg) || 5;
            for (let i = 0; i < count; i++) {
                await ctx.deleteMessage(ctx.message.message_id - i);
            }
            return ctx.reply(`üßπ –û—á–∏—â–µ–Ω–æ ${count} —Å–æ–æ–±—â–µ–Ω–∏–π.`);
        }


    } catch (err) {
        console.error(err);
        ctx.reply('–û—à–∏–±–∫–∞: —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚ùå');
    }
});
}

module.exports = { infbot, warns, muteHistory };